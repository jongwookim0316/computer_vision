# -*- coding: utf-8 -*-
"""실습1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gwqbO9DzrTK7_cfHVMPKVV-dBnQU1NPJ
"""

# 실습1
import numpy as np
import tensorflow as tf
import tensorflow.keras.datasets as ds

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dropout,Dense
from tensorflow.keras.optimizers import Adam

(x_train, y_train),(x_test, y_test) = ds.mnist.load_data()
x_train = x_train.reshape(60000,28,28,1)
x_test = x_test.reshape(10000,28,28,1)
x_train = x_train.astype(np.float32)/255.0
x_test= x_test.astype(np.float32)/255.0
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test= tf.keras.utils.to_categorical(y_test, 10)

cnn = Sequential()

# 첫 번째 컨볼루션 레이어와 맥스 풀링 레이어
cnn.add(Conv2D(6, (5, 5), padding='same', activation='relu', input_shape=(28, 28, 1)))
cnn.add(MaxPooling2D(pool_size=(2, 2), strides=2))

# 두 번째 컨볼루션 레이어와 맥스 풀링 레이어
cnn.add(Conv2D(16, (5, 5), padding='valid', activation='relu'))
cnn.add(MaxPooling2D(pool_size=(2, 2), strides=2))

# 세 번째 컨볼루션 레이어
cnn.add(Conv2D(120, (5, 5), padding='valid', activation='relu'))

# 평탄화
cnn.add(Flatten())

# 완전 연결 레이어
cnn.add(Dense(84, activation='relu'))
cnn.add(Dense(10, activation='softmax'))  # 10개의 출력 클래스

# 모델 컴파일
cnn.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])

# 모델 훈련
cnn.fit(x_train, y_train, batch_size=128, epochs=30, validation_data=(x_test, y_test), verbose=2)

# 모델 평가
res = cnn.evaluate(x_test, y_test, verbose=0)

# 정확도 출력
print('정확도=', res[1] * 100)